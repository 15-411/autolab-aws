#!/bin/bash -e

# Everything is run from ubuntu's home directory.
cd ~ubuntu

. scripts/credentials.sh # Source environment variables from setup script.
. scripts/config_utils.sh # Source helper functions.

sudo add-apt-repository -y ppa:certbot/certbot
sudo apt-get update
sudo apt-get install -y \
  awscli \
  mysql-client \
  mysql-server \
  nginx \
  python-certbot-nginx \
  ;

# Generate random api key: prod########
api_key=prod$(tr -dc 'a-f0-9' < /dev/urandom | head -c8)

# Generate random my sql password.
mysql_password=$(tr -dc 'a-f0-9' < /dev/urandom | head -c16)

# Initialize autograde config template
< Autolab/config/autogradeConfig.rb.template \
  replace_config RESTFUL_HOST "'localhost'" |
  replace_config RESTFUL_PORT 3000 |
  replace_config RESTFUL_KEY "'$api_key'" \
  > Autolab/config/autogradeConfig.rb

# Initialize devise for mailer.
< Autolab/config/initializers/devise.rb.template \
  replace_config config.secret_key "''" |
  replace_config config.mailer_sender "'creds@notolab.cs.cmu.edu'" \
  > Autolab/config/initializers/devise.rb

# Initialize mailer
< Autolab/config/environments/production.template.rb \
  replace_config config.serve_static_files true |
  replace_config config.action_mailer.delivery_method :smtp |
  comment_out 'config.middleware.use Rack::SslEnforcer' |
  uncomment_out config.action_mailer.default_url_options |
  replace_config config.action_mailer.default_url_options "{protocol: 'https', host: 'notolab.cs.cmu.edu'}" |
  uncomment_out config.action_mailer.smtp_settings |
  replace_config config.action_mailer.smtp_settings "{ address: 'email-smtp.us-east-1.amazonaws.com', port: 587, enable_starttls_auto: true, authentication: 'login', user_name: '$MAILER_USERNAME', password: '$MAILER_PASSWORD', domain: 'notolab.cs.cmu.edu' }" |
  replace_config sender_address "\"\\\\\\\"NOTIFIER\\\\\\\" <notifications@notolab.cs.cmu.edu>\"," |
  replace_config exception_recipients "'$email_for_errors'" \
  > Autolab/config/environments/production.rb

# Set up database
< Autolab/config/database.yml.template \
  sed "s/\\<test:/production:/g" |
  sed "s/\\<development:/deprecated:/g" |
  replace_config database autolab_prod |
  replace_config username autolab |
  replace_config password "'$mysql_password'" \
  > Autolab/config/database.yml

# Set up school
< Autolab/config/school.yml.template \
  replace_config school_name '"Carnegie Mellon University"' |
  replace_config school_short_name '"CMU"' \
  > Autolab/config/school.yml

# Initialize config
< Tango/config.template.py \
  replace_config PREFIX '"prod"' |
  replace_config VMMS_NAME '"ec2SSH"' |
  replace_config KEYS "['$api_key']" |
  replace_config CANCEL_TIMEOUT 30 |
  replace_config AUTODRIVER_LOGGING_TIME_ZONE "'America/New_York'" |
  replace_config AUTODRIVER_STREAM True |
  replace_config KEEP_VM_AFTER_FAILURE False |
  replace_config MAX_POOL_SIZE 20 |
  replace_config POOL_SIZE_LOW_WATER_MARK 2 |
  replace_config POOL_ALLOC_INCREMENT 1 |
  replace_config MAX_CONCURRENT_JOBS 1 |
  replace_config EC2_REGION "'us-east-1'" |
  replace_config EC2_REGION_LONG "'US East (N. Virginia)'" |
  replace_config EC2_USER_NAME "'ubuntu'" |
  replace_config DEFAULT_AMI "'ami-0afd8be702c9b181b'" |
  replace_config DEFAULT_INST_TYPE "'r5.large'" |
  replace_config DEFAULT_SECURITY_GROUP "'15-411 Worker'" |
  replace_config SECURITY_KEY_PATH "'$SSH_KEY'" |
  replace_config SECURITY_KEY_NAME "'$ssh_key_basename_no_extension'" |
  replace_config TANGO_RESERVATION_ID "'1'" \
  > Tango/config.py

# Initialize mysql database.
# First, emulate mysql_secure_install with no user interaction.
# See https://stackoverflow.com/questions/24270733/automate-mysql-secure-installation-with-echo-command-via-a-shell-script
sudo mysql -sfu root << 'DB'
DELETE FROM mysql.user WHERE User='';
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%';
FLUSH PRIVILEGES;
DB

# Next, create a user autolab.
sudo mysql -sfu root << DB
CREATE USER 'autolab'@'localhost' IDENTIFIED BY '$mysql_password';
GRANT ALL PRIVILEGES ON *.* TO 'autolab'@'localhost' WITH GRANT OPTION;
DB

# Finally, set up the database.
( cd Autolab
  RAILS_ENV=production bundle exec rake db:reset
  RAILS_ENV=production bundle exec rake assets:precompile
)

# Run mysql and course backups daily
cat << BACKUP | sudo tee /etc/cron.daily/autolab-prod-backups
#!/bin/bash
cd /tmp || exit 0
file=\$(date +%a).sql
mysqldump autolab_prod > "\$file"
if [ "\$?" -eq 0 ]; then
  gzip "\$file"
  AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY AWS_SECRET_ACCESS_KEY=$AWS_SECRET_KEY AWS_DEFAULT_REGION=$aws_region aws s3 cp "\$file.gz" s3://$s3_mysql_bucket
  rm "\$file.gz"
else
  echo "Error backing up mysql"
  exit 255
fi
sudo chmod +x /etc/cron.daily/autolab-prod-backups
course_file=courses-\$(date +%a)
if tar cvf "\$course_file.tar.gz" ~ubuntu/Autolab/courses; then
  AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY AWS_SECRET_ACCESS_KEY=$AWS_SECRET_KEY AWS_DEFAULT_REGION=$aws_region aws s3 cp "\$course_file.tar.gz" s3://$s3_course_bucket
  rm "\$course_file.tar.gz"
fi
BACKUP

# Create site config
cat << "CONFIG" | sudo tee /etc/nginx/sites-available/autolab
server {
        server_name notolab.cs.cmu.edu www.notolab.cs.cmu.edu prod.notolab.cs.cmu.edu www.prod.notolab.cs.cmu.edu;
        location / {
                proxy_pass http://127.0.0.1:15411;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
        }
}
CONFIG

# enable site config by creating a symlink and restarting nginx:
sudo ln -s /etc/nginx/sites-available/autolab /etc/nginx/sites-enabled/autolab
sudo service nginx restart

# They have to just enter the certbot information themselves.
sudo certbot --nginx

ln -s scripts/startup_prod.sh startup.sh
ln -s scripts/promote_user.sh promote_user.sh

rm make_dev make_prod README
echo 'Success :) Run ./startup.sh to start the web server.'
